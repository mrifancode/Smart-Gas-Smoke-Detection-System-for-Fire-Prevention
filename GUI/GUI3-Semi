from pathlib import Path
from tkinter import Tk, Canvas, Button, PhotoImage
import subprocess
import serial
import threading
import cv2
from PIL import Image, ImageTk
import requests
import time

# ========== TELEGRAM CONFIG ==========
bot_token = '7912234203:AAG731XH8NOTCLTgOizmRmGErqUSYpRAo4Q'
chat_id = '7753137443'
video_path = "deteksi_gas_asap.avi"

# ========== SERIAL SETUP ==========
ser = serial.Serial('COM15', 9600)

# ========== FILE & ASET ==========
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"E:\gui\Projek\assets\frame0\EMERGENCY")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# ========== FUNGSI TOMBOL ==========
def back_to_dashboard():
    try:
        if ser:
            ser.close()
    except:
        pass
    window.destroy()
    subprocess.Popen(["python", "gui1.py"])

def open_log_window():
    try:
        if ser:
            ser.close()
    except:
        pass
    window.destroy()
    subprocess.Popen(["python", "gui2.py"])

# ========== GUI SETUP ==========
window = Tk()
window.attributes('-fullscreen', True)
window.configure(bg="#0C505F")

canvas = Canvas(
    window,
    bg="#0C505F",
    height=1024,
    width=1440,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

def center_canvas():
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x_offset = (screen_width - 1440) // 2
    y_offset = (screen_height - 1024) // 2
    canvas.place(x=x_offset, y=y_offset)

window.after(100, center_canvas)

# ========== BUTTON ==========
button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
Button(image=button_image_1, borderwidth=0, highlightthickness=0, command=lambda: print("button_1 clicked"), relief="flat").place(x=1162.0, y=212.0, width=250.0, height=38.0)

button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
Button(image=button_image_2, borderwidth=0, highlightthickness=0, command=open_log_window, relief="flat").place(x=847.0, y=212.0, width=206.0, height=38.0)

button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
Button(image=button_image_3, borderwidth=0, highlightthickness=0, command=back_to_dashboard, relief="flat").place(x=524.0, y=212.0, width=195.0, height=38.0)

# ========== HEADER & ICON ==========
image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
canvas.create_image(720.0, 90.0, image=image_image_1)

canvas.create_text(198.0, 53.0, anchor="nw", text="SMART GAS & \nSMOKE DETECTOR", fill="#FCE5B2", font=("Inter SemiBold", 32 * -1))

image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
canvas.create_image(156.0, 97.0, image=image_image_2)

image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
canvas.create_image(156.0, 72.0, image=image_image_3)

image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
canvas.create_image(1309.0, 88.0, image=image_image_4)

canvas.create_text(539.0, 305.0, anchor="nw", text="CAMERA SYSTEM", fill="#FCE5B2", font=("Inter ExtraBoldItalic", 40 * -1))
canvas.create_rectangle(66.0, 358.0, 1374.0, 970.0, fill="#D9D9D9", outline="")

# ========== VIDEO HANDLING ==========
video_running = False
recording = False
cap = None
video_writer = None
video_label = None

def start_camera():
    global cap, video_running, video_label, recording, video_writer

    if video_running:
        return

    cap = cv2.VideoCapture(0)
    video_writer = cv2.VideoWriter(video_path, cv2.VideoWriter_fourcc(*'XVID'), 20.0, (1280, 600))
    video_running = True
    recording = True
    video_label = canvas.create_image(720, 664, image=None)

    def update_frame():
        global recording
        if not video_running:
            return

        ret, frame = cap.read()
        if ret:
            frame_resized = cv2.resize(frame, (1280, 600))
            rgb_frame = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)
            imgtk = ImageTk.PhotoImage(image=Image.fromarray(rgb_frame))
            canvas.itemconfig(video_label, image=imgtk)
            canvas.image = imgtk

            if recording:
                video_writer.write(frame_resized)

        window.after(30, update_frame)

    update_frame()

def stop_camera():
    global cap, video_running, recording, video_writer
    if video_running:
        video_running = False
        recording = False
        if cap:
            cap.release()
        if video_writer:
            video_writer.release()
        canvas.itemconfig(video_label, image=None)
        send_video_telegram(video_path)

def send_video_telegram(file_path):
    url = f"https://api.telegram.org/bot{bot_token}/sendVideo"
    with open(file_path, 'rb') as video_file:
        files = {'video': video_file}
        data = {'chat_id': chat_id, 'caption': 'Rekaman deteksi gas/asap'}
        response = requests.post(url, files=files, data=data)
        print("Telegram response:", response.status_code)

# ========== SERIAL LISTENER ==========
def serial_read_loop():
    while True:
        try:
            line = ser.readline().decode('utf-8').strip()
            print("Serial:", line)

            if "Asap Terdeteksi! Aktifkan Exhaust Fan" in line or "Gas Sangat Tinggi! Aktifkan WATER SHOWER!" in line:
                start_camera()
            elif "Aman. Matikan Exhaust Fan" in line or "Aman. Matikan WATER SHOWER" in line:
                stop_camera()

        except Exception as e:
            print("Serial error:", e)
            break

threading.Thread(target=serial_read_loop, daemon=True).start()

# ========== WINDOW EVENTS ==========
window.bind("<Escape>", lambda e: window.quit())
window.resizable(False, False)
window.mainloop()
