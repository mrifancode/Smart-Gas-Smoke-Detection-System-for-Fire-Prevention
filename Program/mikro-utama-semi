#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdbool.h>
#include <stdlib.h>

#define BAUDRATE 115200
#define VBAUDRATE (F_CPU/((unsigned long) BAUDRATE*16)-1)
#define BAUDH VBAUDRATE / 256
#define BAUDL VBAUDRATE % 256

#define LED_BAHAYA   PG5
#define LED_AMAN     PE5
#define BUZZER       PE3  // Buzzer di pin PE3 (toggle via ISR)

#define SENSOR_THRESHOLD 400
#define SHOWER_THRESHOLD 1000

#define SET_BIT(port, bit)     ((port) |= (1 << (bit)))
#define CLR_BIT(port, bit)     ((port) &= ~(1 << (bit)))

volatile bool gasBahaya = false;
bool lastGasState = false;
bool showerAktif = false;

void UARTInit(void) {
    UBRR0H = BAUDH;
    UBRR0L = BAUDL;
    UCSR0B = (1 << TXEN0);
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void UART_print(const char *str) {
    while (*str) {
        while (!(UCSR0A & (1 << UDRE0)));
        UDR0 = *str++;
    }
}

void UART_print_number(uint16_t number) {
    char buffer[10];
    itoa(number, buffer, 10);
    UART_print(buffer);
}

void timer3_init_ctc() {
    TCCR3A = 0; // Normal port operation
    TCCR3B = (1 << WGM32) | (1 << CS31); // CTC mode, prescaler 8
    TIMSK3 = (1 << OCIE3A);              // Enable compare match interrupt
    DDRE |= (1 << BUZZER);               // Set buzzer pin as output
    sei();                               // Enable global interrupt
}

ISR(TIMER3_COMPA_vect) {
    PINE |= (1 << BUZZER); // Toggle buzzer pin PE3
}

void adc_init() {
    ADMUX = (1 << REFS0) | (1 << MUX2) | (1 << MUX0); // ADC5 (PC5)
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // Enable ADC, prescaler 64
}

uint16_t adc_read() {
    ADCSRA |= (1 << ADSC);
    while (ADCSRA & (1 << ADSC));
    return ADC;
}

void setup_io() {
    DDRG |= (1 << LED_BAHAYA); // LED merah
    DDRE |= (1 << LED_AMAN);   // LED hijau
    DDRE |= (1 << PE4);        // Shower output
    adc_init();
}

void aktifkan_shower() {
    SET_BIT(PORTE, PE4);
    showerAktif = true;
}

void matikan_shower() {
    CLR_BIT(PORTE, PE4);
    showerAktif = false;
}

void set_buzzer_frequency(uint16_t sensorValue) {
    if (sensorValue < SENSOR_THRESHOLD) {
        OCR3A = 0xFFFF; // Tidak berbunyi
        return;
    }

    uint16_t freq = 200 + ((sensorValue - SENSOR_THRESHOLD) * 800) / (SHOWER_THRESHOLD - SENSOR_THRESHOLD); // 200Hz - 1000Hz
    uint16_t ocr_val = (F_CPU / (8UL * 2 * freq)) - 1;
    OCR3A = ocr_val;
}

int main(void) {
    UARTInit();
    setup_io();
    timer3_init_ctc();

    while (1) {
        uint16_t sensorValue = adc_read();

        UART_print("Nilai Sensor: ");
        UART_print_number(sensorValue);
        UART_print("\r\n");

        if (sensorValue > SENSOR_THRESHOLD) {
            gasBahaya = true;

            SET_BIT(PORTG, LED_BAHAYA);
            CLR_BIT(PORTE, LED_AMAN);

            if (!lastGasState) {
                UART_print("Gas Terdeteksi! Aktifkan FAN\r\n");
                lastGasState = true;
            }

            if (sensorValue >= SHOWER_THRESHOLD && !showerAktif) {
                aktifkan_shower();
                UART_print("Gas Sangat Tinggi! Aktifkan WATER SHOWER!\r\n");
            } else if (sensorValue < SHOWER_THRESHOLD && showerAktif) {
                matikan_shower();
                UART_print("Gas Menurun! Matikan WATER SHOWER.\r\n");
            }

        } else {
            gasBahaya = false;

            CLR_BIT(PORTG, LED_BAHAYA);
            SET_BIT(PORTE, LED_AMAN);

            if (lastGasState) {
                UART_print("Aman. Matikan FAN\r\n");
                lastGasState = false;
            }

            if (showerAktif) {
                matikan_shower();
                UART_print("Aman. Matikan WATER SHOWER\r\n");
            }
        }

        set_buzzer_frequency(sensorValue);
        _delay_ms(1000);
    }
}
